/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#include "emp-sh2pc/emp-sh2pc.h" 
using namespace emp;
using namespace std;
int bitlen = 32;
int party,port;
char *ip = "127.0.0.1"; 
template<typename T> 
vector<T> make_vector(size_t size) { 
return std::vector<T>(size); 
} 

template <typename T, typename... Args> 
auto make_vector(size_t first, Args... sizes) 
{ 
auto inner = make_vector<T>(sizes...); 
return vector<decltype(inner)>(first, inner); 
} 


int main(int argc, char** argv) {
parse_party_and_port(argv, &party, &port);
if(argc>3){
  ip=argv[3];
}
cout<<"Ip Address: "<<ip<<endl;
cout<<"Port: "<<port<<endl;
cout<<"Party: "<<(party==1? "CLIENT" : "SERVER")<<endl;
NetIO * io = new NetIO(party==ALICE ? nullptr : ip, port);
setup_semi_honest(io, party);


Integer a = Integer(bitlen,  (uint32_t)5, PUBLIC);

Integer b = Integer(bitlen,  (uint32_t)10, PUBLIC);

Integer c;

Bit e;

uint32_t d;
c = a.operator+(b);
c = a.operator-(b);
c = a.operator*(b);
c = b.operator/(Integer(bitlen,  (uint32_t)4, PUBLIC));
d = ( (uint32_t)10 %  (uint32_t)4);
c = b.operator>>( (uint32_t)2);
c = b.operator<<( (uint32_t)2);
c = a.operator^(b);
c = a.operator&(b);
c = a.operator|(b);
c = Integer(bitlen, (pow( (int32_t)2,  (int32_t)10)), PUBLIC);
c = b.operator>>( (uint32_t)2);
e = Bit((1 && 0), PUBLIC);
e = Bit((0 || 0), PUBLIC);
e = Bit((0 ^ 1), PUBLIC);
e = a.operator<(b);
e = a.operator==(b);
e = a.operator<(b);
e = a.operator<(b);
e = a.operator<(b);


finalize_semi_honest();
delete io; 
 
return 0;
}

