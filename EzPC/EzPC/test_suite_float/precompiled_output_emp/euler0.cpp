/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#include "emp-sh2pc/emp-sh2pc.h" 
using namespace emp;
using namespace std;
int bitlen = 32;
int party,port;
char *ip = "127.0.0.1"; 
template<typename T> 
vector<T> make_vector(size_t size) { 
return std::vector<T>(size); 
} 

template <typename T, typename... Args> 
auto make_vector(size_t first, Args... sizes) 
{ 
auto inner = make_vector<T>(sizes...); 
return vector<decltype(inner)>(first, inner); 
} 


int main(int argc, char** argv) {
parse_party_and_port(argv, &party, &port);
if(argc>3){
  ip=argv[3];
}
cout<<"Ip Address: "<<ip<<endl;
cout<<"Port: "<<port<<endl;
cout<<"Party: "<<(party==1? "CLIENT" : "SERVER")<<endl;
NetIO * io = new NetIO(party==ALICE ? nullptr : ip, port);
setup_semi_honest(io, party);


int32_t terms;
cout << ("Input terms:") << endl;
/* Variable to read the clear value corresponding to the input variable terms at (2,4-2,31) */
uint32_t __tmp_in_terms;
cin >> __tmp_in_terms;
terms = __tmp_in_terms;

Float euler = Float(1., PUBLIC);

Float fact = Float(1., PUBLIC);

Float ctr = Float(1., PUBLIC);

float t = 2.;
for (uint32_t i =  (int32_t)1; i < terms; i++){
euler = euler.operator+(Float(t, PUBLIC).operator/(fact));
}
cout << ("Value of euler:") << endl;
cout << (euler.reveal<string>(PUBLIC)) << endl;


finalize_semi_honest();
delete io; 
 
return 0;
}

