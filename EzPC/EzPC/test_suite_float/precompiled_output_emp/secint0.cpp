/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#include "emp-sh2pc/emp-sh2pc.h" 
using namespace emp;
using namespace std;
int bitlen = 32;
int party,port;
char *ip = "127.0.0.1"; 
template<typename T> 
vector<T> make_vector(size_t size) { 
return std::vector<T>(size); 
} 

template <typename T, typename... Args> 
auto make_vector(size_t first, Args... sizes) 
{ 
auto inner = make_vector<T>(sizes...); 
return vector<decltype(inner)>(first, inner); 
} 

Float f(Float x){
return Float(1., PUBLIC).operator/(x);
}


int main(int argc, char** argv) {
parse_party_and_port(argv, &party, &port);
if(argc>3){
  ip=argv[3];
}
cout<<"Ip Address: "<<ip<<endl;
cout<<"Port: "<<port<<endl;
cout<<"Party: "<<(party==1? "CLIENT" : "SERVER")<<endl;
NetIO * io = new NetIO(party==ALICE ? nullptr : ip, port);
setup_semi_honest(io, party);


Float l;
if ((party == ALICE)) {
cout << ("Input l:") << endl;
}
/* Variable to read the clear value corresponding to the input variable l at (6,2-6,28) */
float __tmp_in_l;
if ((party == ALICE)) {
cin >> __tmp_in_l;
}
l = Float(__tmp_in_l, ALICE);

Float r;
if ((party == ALICE)) {
cout << ("Input r:") << endl;
}
/* Variable to read the clear value corresponding to the input variable r at (7,2-7,28) */
float __tmp_in_r;
if ((party == ALICE)) {
cin >> __tmp_in_r;
}
r = Float(__tmp_in_r, ALICE);

int32_t terms =  (int32_t)20;

float termsf = 20.;

Float h = r.operator-(l).operator/(Float(termsf, PUBLIC));

Float acc = Float(0., PUBLIC);

Float x = l;
for (uint32_t i =  (int32_t)0; i < terms; i++){
acc = acc.operator+(f(x).operator*(h));
x = x.operator+(h);
}
cout << ("Value of acc:") << endl;
cout << (acc.reveal<string>(ALICE)) << endl;


finalize_semi_honest();
delete io; 
 
return 0;
}

