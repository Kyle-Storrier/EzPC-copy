/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#include "emp-sh2pc/emp-sh2pc.h" 
using namespace emp;
using namespace std;
int bitlen = 32;
int party,port;
char *ip = "127.0.0.1"; 
template<typename T> 
vector<T> make_vector(size_t size) { 
return std::vector<T>(size); 
} 

template <typename T, typename... Args> 
auto make_vector(size_t first, Args... sizes) 
{ 
auto inner = make_vector<T>(sizes...); 
return vector<decltype(inner)>(first, inner); 
} 


int main(int argc, char** argv) {
parse_party_and_port(argv, &party, &port);
if(argc>3){
  ip=argv[3];
}
cout<<"Ip Address: "<<ip<<endl;
cout<<"Port: "<<port<<endl;
cout<<"Party: "<<(party==1? "CLIENT" : "SERVER")<<endl;
NetIO * io = new NetIO(party==ALICE ? nullptr : ip, port);
setup_semi_honest(io, party);


auto x = make_vector<float>( (int32_t)2,  (int32_t)2);
cout << ("Input x:") << endl;
/* Variable to read the clear value corresponding to the input variable x at (2,2-2,31) */
float __tmp_in_x;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)2; i1++){
cin >> __tmp_in_x;
x[i0][i1] = __tmp_in_x;
}
}

float y;
cout << ("Input y:") << endl;
/* Variable to read the clear value corresponding to the input variable y at (3,2-3,25) */
float __tmp_in_y;
cin >> __tmp_in_y;
y = __tmp_in_y;

Float w;
if ((party == BOB)) {
cout << ("Input w:") << endl;
}
/* Variable to read the clear value corresponding to the input variable w at (4,2-4,28) */
float __tmp_in_w;
if ((party == BOB)) {
cin >> __tmp_in_w;
}
w = Float(__tmp_in_w, BOB);

Float z = Float((x[ (int32_t)1][ (int32_t)0] + y), PUBLIC).operator*(w).operator-(Float(100., PUBLIC));
cout << ("Value of z:") << endl;
cout << (z.reveal<string>(ALICE)) << endl;


finalize_semi_honest();
delete io; 
 
return 0;
}

